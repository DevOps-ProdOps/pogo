# !/usr/local/bin/perl
use strict;
use warnings;

use Getopt::Std;
use Pod::Usage;
use Pogo::Client::Auth qw( password_get );
use Pogo::Client::Util qw( password_encrypt );
  # use this hard-coded fake/test key because we're not distributed and in-memory
use Pogo::One::Util qw( worker_cert worker_private_key );

getopts("hvp", \my %opts);

pod2usage() if $opts{h};

use Log::Log4perl qw(:easy);

if( $opts{ v } ) {
    Log::Log4perl->easy_init( { level => $DEBUG, layout => "%F{1}:%L> %m%n" } );
}

use Pogo::One;
use Pogo::Job;

my @password = ();

if( $opts{ p } ) {
    my $cert = worker_cert();

    my $password = password_get( );
      # client immediately encrypts the password with the worker's public key
    $password = password_encrypt( \$cert, $password );
    @password = ( password => $password );
}

my $pogo = Pogo::One->new(
    worker_key => worker_private_key(),
);

my $job = Pogo::Job->new(
    @password,
    task_name => "ssh",
    command   => "date",
    range     => [ qw(host1 host2) ],
    config    => <<'EOT',
tag:
sequence:
  - host3
  - host2
  - host1
EOT
);

my $main = AnyEvent->condvar();

$pogo->reg_cb( "worker_task_done", sub {
    my( $c, $task ) = @_;

    my $stdout = $task->stdout;
    chomp $stdout;

    print "Task done: host=", $task->host(), " stdout=$stdout\n";
});

$pogo->reg_cb( "scheduler_job_done", sub {
    my( $c, $job ) = @_;

    # We've accomplished our only job, we're done. Exit.
    $main->send();
} );

$pogo->reg_cb( "pogo_one_ready", sub {

    $pogo->job_submit( 
        $job,
    );
} );

$pogo->start();

$main->recv();

__END__

=head1 NAME

pogo-one - All-In-One Pogo

=head1 SYNOPSIS

    $ cat one.conf
    tag:
      # no tags
    sequence:
      - host3
      - host2
      - host1
    
      # specify two hosts 1 and 2, but config says to run them in 
      # reverse order
    $ pogo-one --password --hosts host1,host2 \
        --config one.conf --command 'date'
    Password: ****
    host2: Running target
    host2: Success
    host1: Running target
    host1: Success

=head1 DESCRIPTION

C<pogo-one> is a simple utility that loads all the usually distributed
Pogo components into one single process and runs it from the command line.
In this way, you can test Pogo functions like constraints and sequences without
having to set up the different components of an entire production system.
It is mainly used for testing, but also helps with small deployment jobs.

=head2 PASSWORDS

By default, C<pogo-one> assumes that you have access to the target boxes
without having to type your password or your ssh keyring's passphrase.
To have C<pogo-one> collect the password and use it to sign in on the 
target, use the C<--password> options

    $ pogo-one --password ...
    Password: ****
    ...

=head2 OPTIONS

=over 4

=item C<--config file>

Location of configuration file that defineds Pogo tags, sequences, and
constraints.

=item C<--password>

If specified, c<pogo-one> will collect the user's target password at
a command line prompt, and use it to log into the target machines.

=item C<--hosts>

All hosts to run the command on. Order and parallelism is determined by 
the configuration file.

=item C<--commands>

The command to run on all hosts.

=back

=head1 LICENSE

Copyright (c) 2010-2012 Yahoo! Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
imitations under the License.

=head1 AUTHORS

Mike Schilli <m@perlmeister.com>
Ian Bettinger <ibettinger@yahoo.com>

Many thanks to the following folks for implementing the
original version of Pogo: 

Andrew Sloane <andy@a1k0n.net>, 
Michael Fischer <michael+pogo@dynamine.net>,
Nicholas Harteau <nrh@hep.cat>,
Nick Purvis <nep@noisetu.be>,
Robert Phan <robert.phan@gmail.com>,
Srini Singanallur <ssingan@yahoo.com>,
Yogesh Natarajan <yogesh_ny@yahoo.co.in>

